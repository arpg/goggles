<!--
  This file will launch the AWR1843 radar board and the Goggles velocity estimation node
 -->

<launch>
  <!-- set default for ti_mmwave_rospkg args -->
  <arg name="config" default="rangeRes_0-12_velRes_0-04_velMax_2-56_3d_10Hz" doc="3d best velocity resolution - Doppler peak grouping enabled"/>
  <arg name="sdk" default="03_02_00_04"/>
  <arg name="command_port" default="/dev/ttyACM0"/>
  <arg name="data_port" default="/dev/ttyACM1"/>
  <arg name="mmwave_topic" default="/mmWaveDataHdl/RScan"/>

  <!-- additional radar parameters -->
  <arg name="launch_radar" default="true" doc="launch radar in addition to velocity estimator?"/>
  <arg name="publish_inliers" default="false" doc="publish MLESAC inlier pointcloud?"/>
  <arg name="use_const_cov" default="false" doc="use const values for twist covariance rather than estimated covariance?"/>
  <arg name="cov_scale_factor" default="1" doc="scale covariance values by constant value"/>

  <!-- Additional radar pre-filtering parameters -->
  <arg name="type" default="3D" doc="2D or 3D radar data"/>
  <arg name="azimuth_thres" default="80" doc="Azimuth threshold value"/>
  <arg name="elevation_thres" default="80" doc="Elevation threshold value"/>
  <arg name="range_thres" default="0.30" doc="Range threshold value"/>
  <arg name="intensity_thres" default="1" doc="Intensity threshold value"/>

  <arg name="vrpn" default="false" doc="Using vrpn system?"/>
  <arg name="rviz" default="false"/>

  <!-- Call mmWave sensor launch file -->
  <include if="$(arg launch_radar)" file="$(find ti_mmwave_rospkg)/launch/ti_mmwave_sensor.launch">
    <arg name="device" value="1843" doc="TI mmWave sensor device type [1443, 1642, 1843]"/>
    <arg name="config" value="$(arg config)"/>
    <arg name="sdk" value="$(arg sdk)" doc="version of SDK that firmware is compiled for - use 03_02_00_04"/>
    <arg name="max_allowed_elevation_angle_deg" value="90" doc="Maximum allowed elevation angle in degrees for detected object data [0 > value >= 90]}"/>
    <arg name="max_allowed_azimuth_angle_deg" value="90" doc="Maximum allowed azimuth angle in degrees for detected object data [0 > value >= 90]}"/>
    <arg name="command_port" value="$(arg command_port)"/>
    <arg name="data_port" value="$(arg data_port)"/>
  </include>

  <!-- launch Goggles velocity estimator_node -->
  <node pkg="goggles" type="radar_velocity.py" name="goggles_node" output="screen">
    <param name="type" value="$(arg type)"/>
    <param name="mmwave_topic" value="$(arg mmwave_topic)"/>
    <param name="publish_inliers" value="$(arg publish_inliers)"/>
    <param name="use_const_cov" value="$(arg use_const_cov)"/>
    <param name="cov_scale_factor" value="$(arg cov_scale_factor)"/>

    <param name="azimuth_thres" value="$(arg azimuth_thres)"/>
    <param name="elevation_thres" value="$(arg elevation_thres)"/>
    <param name="range_thres" value="$(arg range_thres)"/>
    <param name="intensity_thres" value="$(arg intensity_thres)"/>
  </node>

  <!-- launch inertial2BodyFrame Velocity transform node -->
  <node if="$(arg vrpn)" pkg="static_tfs" type="vrpn2BodyFrameVelocity.py" name="vrpn2BodyFrameVelocity_node" output="screen"/>

  <!-- Launch Rviz with pre-defined configuration to view mmWave sensor detected object data (color by elevation) -->
  <!-- <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find ti_mmwave_rospkg)/rviz/radar_det_obj_color_by_elev.rviz"/> -->
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find ti_mmwave_rospkg)/rviz/radar_doppler_inlier_pcl.rviz"/>

  <!-- Static transform from map to base_radar_link for visualization of stand-alone mmWave sensor using Rviz -->
  <node if="$(arg rviz)" pkg="tf2_ros" type="static_transform_publisher" name="map_radar_Static_tf" args="0 0 0 0 0 0 map base_radar_link"/>

</launch>
